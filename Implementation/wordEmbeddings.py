import pandas as pd 
import os 
import gensim
import spacy
import tkinter as tk
nlp = spacy.load('en_core_web_md')

file_path = 'daigt_external_dataset.csv'


def calculate_similarity(text1, text2):
    doc1 = nlp(text1)
    doc2 = nlp(text2)
    similarity_score = doc1.similarity(doc2)
    return similarity_score

def calculate_average_similarity(text1, file_path,col):
    df = pd.read_csv(file_path)
    similarity_scores = []
    for text2 in df[col]:
        similarity_score = calculate_similarity(text1, text2)
        similarity_scores.append(similarity_score)
        if len(similarity_scores) % 100 == 0:
            print(f"Processed {len(similarity_scores)*10} texts")
        if len(similarity_scores) == 200:
            break
    average_similarity = sum(similarity_scores) / len(similarity_scores)
    return average_similarity



# testing and obtaining the FP , FN , TP , TN




# df = pd.read_csv('AI_Text.csv', encoding='latin-1')
# cnt = 0
# TP = 0
# FN = 0
# for text in df['text']:
#     average_similarity1 = calculate_average_similarity(text, file_path, 'text')
#     average_similarity2 = calculate_average_similarity(text, file_path, 'source_text')
#     cnt += 1
#     print(f"done with {cnt} texts")
#     if average_similarity1 > average_similarity2:
#         FN += 1
#     else:
#         TP += 1
#     print(f"TP: {TP}, FN: {FN}")




# df = pd.read_csv('Human_text.csv', encoding='latin-1')
# cnt = 0
# TN = 0
# FP = 0
# for text in df['text']:
#     average_similarity1 = calculate_average_similarity(text, file_path, 'text')
#     average_similarity2 = calculate_average_similarity(text, file_path, 'source_text')
#     cnt += 1
#     print(f"done with {cnt} texts")
#     if average_similarity1 > average_similarity2:
#         TN += 1
#     else:
#         FP += 1
#     print(f"TN: {TN}, FP: {FP}")






TP = 95;
FN = 5;
TN = 89;
FP = 11;
accuracy = (TP + TN) / (TP + TN + FP + FN)
precision = TP / (TP + FP)
recall = TP / (TP + FN)
f1_score = (2 * (precision * recall)) / (precision + recall)
MCC = (TP * TN - FP * FN) / ((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN)) ** 0.5
print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1_score}")
print(f"MCC: {MCC}")






# GUI code
def calculate_button_clicked():
    text1 = text_input.get("1.0", tk.END).strip()
    if text1:
        average_similarity1 = calculate_average_similarity(text1, file_path, 'text')
        average_similarity2 = calculate_average_similarity(text1, file_path, 'source_text')
        print(f"The average similarity between text1 and the human text in the file is: {average_similarity1}")
        print(f"The average similarity between text1 and the AI texts in the file is: {average_similarity2}")
        if average_similarity1 > average_similarity2:
            result_label.config(text=f"The text is more likely to be written by a human" , fg="blue")
        else:
            result_label.config(text=f"The text is more likely to be generated by an AI model", fg="red")

# Create the main window
window = tk.Tk()
window.title("AI Detector")

# Set the window size
window.geometry("600x400")

# Create a frame for better organization
frame = tk.Frame(window, pady=10) # Decreased the pady value to add less vertical space
frame.pack()

# Create the text input field
text_label = tk.Label(frame, text="Enter your text:", font=("Arial", 14))
text_label.pack()
text_input = tk.Text(frame, height=10, width=50, font=("Arial", 12), bd=2, relief=tk.SOLID, bg="white", fg="black")
text_input.pack()

# Create a frame for the calculate button
button_frame = tk.Frame(window)
button_frame.pack()

# Create the calculate button
calculate_button = tk.Button(button_frame, text="Detect Text", command=calculate_button_clicked, font=("Arial", 12), bg="light sky blue", activebackground="blue", padx=10, pady=5)
calculate_button.pack()

# Create a frame for the result label
result_frame = tk.Frame(window, pady=20)
result_frame.pack()

result_label = tk.Label(result_frame, text="", font=("Arial", 16))
result_label.pack()

# Start the GUI event loop
window.mainloop()